{"version":3,"sources":["utils/auth.js","utils/API.js","utils/localStorage.js","pages/SearchBooks.js","pages/SavedBooks.js","utils/mutations.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","getMe","fetch","headers","authorization","saveBook","bookData","method","body","JSON","stringify","deleteBook","bookId","removeBookId","savedBookIds","parse","updatedSavedBookIds","filter","savedBookId","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useEffect","bookIdArr","length","handleFormSubmit","event","a","preventDefault","response","ok","Error","json","items","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","error","handleSaveBook","bookToSave","find","Auth","loggedIn","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","key","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","SavedBooks","userData","setUserData","userDataLength","Object","keys","user","getUserData","handleDeleteBook","updatedUser","savedBooks","gql","ADD_USER","SignupForm","useMutation","createUser","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","handleInputChange","currentTarget","checkValidity","stopPropagation","variables","log","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","logout","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","authLink","setContext","_","httpLink","createHttpLink","uri","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b199e4d1.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","// route to get logged in user's info (needs the token)\nexport const getMe = (token) => {\n  return fetch('/api/users/me', {\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\nexport const createUser = (userData) => {\n  return fetch('/api/users', {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\nexport const loginUser = (userData) => {\n  return fetch('/api/users/login', {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\n// save book data for a logged in user\nexport const saveBook = (bookData, token) => {\n  return fetch('/api/users', {\n    method: 'PUT',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(bookData),\n  });\n};\n\n// remove saved book data for a logged in user\nexport const deleteBook = (bookId, token) => {\n  return fetch(`/api/users/books/${bookId}`, {\n    method: 'DELETE',\n    headers: {\n      'Accept': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\n// make a search to google books api\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const searchGoogleBooks = (query) => {\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n};\n","export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : [];\n\n  return savedBookIds;\n};\n\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem('saved_books');\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\n\nimport Auth from '../utils/auth';\nimport { saveBook, searchGoogleBooks } from '../utils/API';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const response = await saveBook(bookToSave, token);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? (\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveBook(book.bookId)}>\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\n\nimport { getMe, deleteBook } from '../utils/API';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\n\nconst SavedBooks = () => {\n  const [userData, setUserData] = useState({});\n\n  // use this to determine if `useEffect()` hook needs to run again\n  const userDataLength = Object.keys(userData).length;\n\n  useEffect(() => {\n    const getUserData = async () => {\n      try {\n        const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n        if (!token) {\n          return false;\n        }\n\n        const response = await getMe(token);\n\n        if (!response.ok) {\n          throw new Error('something went wrong!');\n        }\n\n        const user = await response.json();\n        setUserData(user);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    getUserData();\n  }, [userDataLength]);\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const response = await deleteBook(bookId, token);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const updatedUser = await response.json();\n      setUserData(updatedUser);\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (!userDataLength) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN_USER = gql`\n    mutation login($email: String!, $password: String!){\n        login(email: $email, password: $password) {\n            token\n            user{\n                _id\n                username\n            }\n        }\n    }\n`;\n\nexport const ADD_USER = gql`\n    mutation addUser($username: String!, $email: String!, $password: String!){\n        addUser(username: $username, email: $email, password: $password){\n            token\n            user{\n                username\n                email\n                password\n            }\n        }\n    }\n`;\n\nexport const SAVE_BOOK = gql`\n    mutation saveBook($bookData: BookInput!){\n        saveBook(bookData: $bookData){\n            _id\n            username\n            email\n            bookCount\n            savedBooks{\n                bookId\n                authors\n                title\n                description\n                link\n                image\n            }\n        }\n    }\n`;\n\n// const REMOVE_BOOK = gql`\n//     mutation removeBook($bookId: String!){\n//         removeBook(bookId: $bookId){\n//             _id\n//             username\n//             email\n//             bookCount\n//             savedBooks{\n//                 bookId\n//                 authors\n//                 title\n//                 description\n//                 link\n//                 image\n//         }\n//     }\n// `;\n","import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { ADD_USER } from '../utils/mutations';\nimport { useMutation } from '@apollo/client'\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // set user mutation for adding users\n  const [createUser, { error }] = useMutation(ADD_USER);\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const response = await createUser({\n        variables: {\n          username: userFormData.username,\n          email: userFormData.email,\n          password: userFormData.password,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { token, user } = await response.json();\n      console.log(user);\n      Auth.login(token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n      {error && <div>Signup failed</div>}\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { loginUser } from '../utils/API';\nimport Auth from '../utils/auth';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const response = await loginUser(userFormData);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { token, user } = await response.json();\n      console.log(user);\n      Auth.login(token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { ApolloProvider, ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client'\nimport { setContext } from '@apollo/client/link/context'\nimport SearchBooks from './pages/SearchBooks';\nimport SavedBooks from './pages/SavedBooks';\nimport Navbar from './components/Navbar';\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n    <Router>\n      <>\n        <Navbar />\n        <Switch>\n          <Route exact path='/' component={SearchBooks} />\n          <Route exact path='/saved' component={SavedBooks} />\n          <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n        </Switch>\n      </>\n    </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}